[{"C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\index.js":"1","C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\App.js":"2","C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\reportWebVitals.js":"3","C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\components\\AddTodo.js":"4","C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\components\\DisplayTodo.js":"5"},{"size":500,"mtime":1611502297536,"results":"6","hashOfConfig":"7"},{"size":2279,"mtime":1611502297251,"results":"8","hashOfConfig":"7"},{"size":364,"mtime":1611502297554,"results":"9","hashOfConfig":"7"},{"size":1720,"mtime":1611502297366,"results":"10","hashOfConfig":"7"},{"size":7023,"mtime":1611502297469,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l2dty1",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\index.js",[],"C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\App.js",["26"],"import react, { useState } from \"react\";\nimport \"./App.css\";\nimport Sun from \"./assests/images/icon-sun.svg\";\nimport Moon from \"./assests/images/icon-moon.svg\";\nimport AddTodo from \"./components/AddTodo\";\nimport DisplayTodo from \"./components/DisplayTodo\";\n\n/**\n * if signed in post new Todo\n * if not save in the created array\n *\n * if not signed in send created array to display todo or send the objects from the get method\n */\n\nconst App = () => {\n  const [colorTheme, setColorTheme] = useState(Sun);\n  const [todoArray, setTodoArray] = useState([]);\n\n  let outerDivTheme, buttonTheme, mainTheme, footerTheme;\n\n  if (colorTheme === Sun) {\n    outerDivTheme = \"dark\";\n    buttonTheme = \"button-dark\";\n    mainTheme = \"main-dark\";\n    footerTheme = \"dark-text\";\n  } else {\n    outerDivTheme = \"light\";\n    buttonTheme = \"button-light\";\n    mainTheme = \"main-light\";\n    footerTheme = \"light-text\";\n  }\n\n  const handleTheme = () => {\n    colorTheme === Sun ? setColorTheme(Moon) : setColorTheme(Sun);\n  };\n\n  const handleNewTodo = (newTodo) => {\n    newTodo.order = todoArray.length;\n    setTodoArray([...todoArray, newTodo]);\n    console.log([...todoArray, newTodo]);\n  };\n\n  const handleUpdatedTodos = (updated) => {\n    setTodoArray(updated);\n  };\n\n  return (\n    <div className={outerDivTheme + \" background container\"}>\n      <nav>\n        <button className={buttonTheme + \" float-right\"}>\n          Sign in with Google\n        </button>\n      </nav>\n      <div className={mainTheme + \" main\"}>\n        <header className=\"row width-600\">\n          <h1>NOTED</h1>\n          <img\n            src={colorTheme}\n            onClick={handleTheme}\n            className=\"pointer\"\n            alt=\"colorTheme\"\n          />\n        </header>\n\n        <AddTodo\n          theme={colorTheme}\n          newTodoCallback={(newTodo) => handleNewTodo(newTodo)}\n        />\n\n        <DisplayTodo\n          theme={colorTheme}\n          displayTodos={todoArray}\n          updatedTodoCallback={(updated) => handleUpdatedTodos(updated)}\n        />\n\n        <footer className={footerTheme + \" row width-600\"}>\n          <small>Drag and drop to reorder list</small>\n          <small className=\"not-allowed\">All My todos</small>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",["27","28"],"C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\reportWebVitals.js",[],"C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\components\\AddTodo.js",["29"],"import react, { useState } from \"react\";\nimport \"./AddTodo.css\";\nimport Sun from \"../assests/images/icon-sun.svg\";\nimport Check from \"../assests/images/icon-check.svg\";\n\nconst AddTodo = (props) => {\n  const [completedTodo, setCompletedTodo] = useState(false);\n\n  let containerTheme, radioBackground, radioTheme, textTheme;\n\n  if (props.theme === Sun) {\n    containerTheme = \"dark-container\";\n    radioTheme = \"dark-check-div\";\n    textTheme = \"white-text\";\n  } else {\n    containerTheme = \"light-container\";\n    radioTheme = \"light-check-div\";\n    textTheme = \"light-themed-text\";\n  }\n\n  if (completedTodo) {\n    radioBackground = \"check-clicked\";\n  } else {\n    radioBackground = \"\";\n  }\n\n  const handleCompletedTodo = () => {\n    completedTodo ? setCompletedTodo(false) : setCompletedTodo(true);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\" && event.target.value.length > 0) {\n      let newTodo = {\n        order: \"\",\n        title: new Date().toDateString(),\n        body: event.target.value,\n        status: completedTodo ? \"completed\" : \"active\",\n      };\n\n      event.target.value = \"\";\n      props.newTodoCallback(newTodo);\n    }\n  };\n\n  return (\n    <div\n      className={\n        containerTheme + \" new-container padding-10 margin-10 new-row width-600\"\n      }\n    >\n      <div\n        className={radioBackground + \" \" + radioTheme + \" check-div pointer\"}\n        onClick={handleCompletedTodo}\n      >\n        {completedTodo && <img src={Check} className=\"check\" alt=\"check\" />}\n      </div>\n      <input\n        onKeyPress={handleKeyPress}\n        className={textTheme + \" width-500\"}\n        placeholder=\"Create a new todo...\"\n      />\n    </div>\n  );\n};\n\nexport default AddTodo;\n","C:\\Users\\angel\\Downloads\\todo-app-main\\todo-app-main\\noted\\src\\components\\DisplayTodo.js",["30","31"],"import react, { useEffect, useState } from \"react\";\nimport \"./AddTodo.css\";\nimport Sun from \"../assests/images/icon-sun.svg\";\nimport Check from \"../assests/images/icon-check.svg\";\nimport Cross from \"../assests/images/icon-cross.svg\";\n\nconst DisplayTodo = (props) => {\n  const { theme, updatedTodoCallback } = props;\n\n  const [todos, setTodos] = useState(props.displayTodos);\n  const [filterStatus, setFilterStatus] = useState(\"\");\n  const [isActive, setActive] = useState(\"all\");\n\n  useEffect(() => {\n    setTodos(props.displayTodos);\n  }, [props.displayTodos]);\n\n  let containerTheme, radioBackground, footerTheme, shadowTheme, activeTheme;\n\n  if (theme === Sun) {\n    containerTheme = \"dark-container\";\n    footerTheme = \"dark-text\";\n    shadowTheme = \"dark-box-shadow\";\n    activeTheme = \"dark-active\";\n  } else {\n    containerTheme = \"light-container\";\n    footerTheme = \"light-text\";\n    shadowTheme = \"light-box-shadow\";\n    activeTheme = \"light-active\";\n  }\n\n  // update the todo's status\n  const handleCompleted = (i) => {\n    const temp = todos.map((todo, index) => {\n      if (index === i) {\n        todo.status === \"active\"\n          ? (todo.status = \"completed\")\n          : (todo.status = \"active\");\n      }\n\n      return todo;\n    });\n\n    setTodos(temp);\n    updatedTodoCallback(temp);\n  };\n\n  const countActive = () => {\n    let active = 0;\n\n    todos.forEach((todo) => {\n      if (todo.status === \"active\") {\n        active += 1;\n      }\n    });\n\n    return active;\n  };\n\n  const handleShowAll = () => {\n    setActive(\"all\");\n    setFilterStatus(\"\");\n  };\n\n  const handleShowActive = () => {\n    setActive(\"active\");\n    setFilterStatus(\"active\");\n  };\n\n  const handleShowCompleted = () => {\n    setActive(\"completed\");\n    setFilterStatus(\"completed\");\n  };\n\n  const handleRemoveCompleted = () => {\n    const temp = todos.filter((todo) => todo.status === \"active\");\n\n    setTodos(temp);\n    updatedTodoCallback(temp);\n  };\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n\n    let temp,\n      draggedIndex = parseInt(event.dataTransfer.getData(\"index\"));\n    let targetIndex = parseInt(event.target.parentElement.id);\n\n    console.log(todos);\n\n    if (targetIndex < draggedIndex) {\n      // increment others indexes\n\n      temp = todos.map((todo, index) => {\n        if (index > targetIndex - 1 && index < draggedIndex) {\n          todo.order += 1;\n        }\n\n        if (index === draggedIndex) todo.order = targetIndex;\n\n        return todo;\n      });\n    } else {\n      temp = todos.map((todo, index) => {\n        if (index < targetIndex + 1 && index > draggedIndex) {\n          todo.order -= 1;\n        }\n\n        if (index === draggedIndex) todo.order = targetIndex;\n\n        return todo;\n      });\n    }\n\n    temp.sort((a, b) => {\n      return a.order - b.order;\n    });\n\n    console.log(temp);\n\n    setTodos(temp);\n    updatedTodoCallback(temp);\n  };\n\n  const handleDeleteTodo = (index) => {\n    const temp = todos.filter((todo, i) => i !== index);\n\n    setTodos(temp);\n    updatedTodoCallback(temp);\n  };\n\n  const displayItems = todos.map((todo, index) => {\n    let radioTheme, borderTheme, canceledTheme, textTheme;\n\n    if (theme === Sun) {\n      radioTheme = \"dark-check-div\";\n      borderTheme = \"dark-todo\";\n      canceledTheme = \"dark-text\";\n      textTheme = \"white-text\";\n    } else {\n      radioTheme = \"light-check-div\";\n      borderTheme = \"light-todo\";\n      canceledTheme = \"light-canceled-text\";\n      textTheme = \"light-themed-text\";\n    }\n\n    if (todo.status === \"completed\") {\n      radioBackground = \"check-clicked\";\n    } else {\n      radioBackground = \"\";\n    }\n\n    if (todo.status === filterStatus) {\n      return (\n        <div\n          key={index}\n          id={index}\n          className={borderTheme + \" new-row padding-15\"}\n          draggable=\"true\"\n          onDragStart={(e) => e.dataTransfer.setData(\"index\", index)}\n        >\n          <div\n            className={\n              radioBackground + \" \" + radioTheme + \" check-div pointer\"\n            }\n            onClick={() => handleCompleted(index)}\n          >\n            {todo.status === \"completed\" && (\n              <img src={Check} className=\"check\" alt=\"check\" />\n            )}\n          </div>\n          {todo.status === \"completed\" ? (\n            <del className={canceledTheme + \" width-500\"}>{todo.body}</del>\n          ) : (\n            <span className={textTheme + \" width-500\"}>{todo.body}</span>\n          )}\n          <img\n            src={Cross}\n            className=\"cross pointer\"\n            onClick={() => handleDeleteTodo(index)}\n            alt=\"cross\"\n          />\n        </div>\n      );\n    }\n\n    if (filterStatus.length === 0) {\n      return (\n        <div\n          key={index}\n          id={index}\n          className={borderTheme + \" new-row padding-15\"}\n          draggable=\"true\"\n          onDragStart={(e) => e.dataTransfer.setData(\"index\", index)}\n        >\n          <div\n            className={\n              radioBackground + \" \" + radioTheme + \" check-div pointer\"\n            }\n            onClick={() => handleCompleted(index)}\n          >\n            {todo.status === \"completed\" && (\n              <img src={Check} className=\"check\" alt=\"check\" />\n            )}\n          </div>\n          {todo.status === \"completed\" ? (\n            <del className={canceledTheme + \" width-500\"}>{todo.body}</del>\n          ) : (\n            <span className={textTheme + \" width-500\"}>{todo.body}</span>\n          )}\n          <img\n            src={Cross}\n            className=\"cross pointer\"\n            onClick={() => handleDeleteTodo(index)}\n            alt=\"cross\"\n          />\n        </div>\n      );\n    }\n  });\n\n  return (\n    <div\n      className={\n        containerTheme +\n        \" \" +\n        shadowTheme +\n        \" new-container margin-40 width-600\"\n      }\n      onDragOver={(e) => e.preventDefault()}\n      onDrop={handleDrop}\n    >\n      {displayItems}\n      <div className={footerTheme + \" small padding-30 todo-footer\"}>\n        <span>{countActive()} items left</span>\n        <div>\n          <span\n            className={\n              isActive === \"all\"\n                ? `${activeTheme} margin-right-20 pointer`\n                : \"margin-right-20 pointer\"\n            }\n            onClick={handleShowAll}\n          >\n            All\n          </span>\n          <span\n            className={\n              isActive === \"active\"\n                ? `${activeTheme} margin-right-20 pointer`\n                : \"margin-right-20 pointer\"\n            }\n            onClick={handleShowActive}\n          >\n            Active\n          </span>\n          <span\n            className={\n              isActive === \"completed\" ? `${activeTheme} pointer` : \"pointer\"\n            }\n            onClick={handleShowCompleted}\n          >\n            Completed\n          </span>\n        </div>\n        <span className=\"pointer\" onClick={handleRemoveCompleted}>\n          Clear Completed\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayTodo;\n",{"ruleId":"32","severity":1,"message":"33","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":13},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":13},{"ruleId":"32","severity":1,"message":"33","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":13},{"ruleId":"40","severity":1,"message":"41","line":133,"column":48,"nodeType":"42","messageId":"43","endLine":133,"endColumn":50},"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]